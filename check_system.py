# -*- coding: utf-8 -*-
"""
Tool ki·ªÉm tra c·∫•u h√¨nh v√† tr·∫°ng th√°i h·ªá th·ªëng VN Legal Assistant
"""

import os
import sys
import requests
from pathlib import Path

# Th√™m src v√†o path ƒë·ªÉ import ƒë∆∞·ª£c
sys.path.insert(0, str(Path(__file__).parent / "src"))

from core.settings import Settings
from core.utils import check_internet_connection, print_status_info
from rich.console import Console
from rich.table import Table
from rich import box
from rich.text import Text
import datetime

def check_ollama_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Ollama"""
    try:
        ollama_url = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
        response = requests.get(f"{ollama_url}/api/tags", timeout=5)
        return response.status_code == 200, response.json() if response.status_code == 200 else None
    except Exception as e:
        return False, str(e)

def check_gemini_config():
    """Ki·ªÉm tra c·∫•u h√¨nh Gemini"""
    api_key = os.getenv("GOOGLE_API_KEY", "").strip()
    if not api_key:
        return False, "Kh√¥ng c√≥ API Key"
    
    try:
        import google.generativeai as genai
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-1.5-flash")
        # Test v·ªõi m·ªôt c√¢u ng·∫Øn
        response = model.generate_content("Hello")
        return True, "K·∫øt n·ªëi th√†nh c√¥ng"
    except Exception as e:
        return False, f"L·ªói: {e}"

def check_data_files():
    """Ki·ªÉm tra d·ªØ li·ªáu"""
    data_dir = Path(os.getenv("DATA_DIR", "data"))
    if not data_dir.exists():
        return False, f"Th∆∞ m·ª•c {data_dir} kh√¥ng t·ªìn t·∫°i"
    
    json_files = list(data_dir.glob("*.json"))
    if not json_files:
        return False, f"Kh√¥ng c√≥ file .json trong {data_dir}"
    
    return True, f"C√≥ {len(json_files)} file d·ªØ li·ªáu: {[f.name for f in json_files[:3]]}..."

def check_index_files():
    """Ki·ªÉm tra index"""
    index_path = Path(os.getenv("INDEX_PATH", "index/index.jsonl"))
    if not index_path.exists():
        return False, f"File index {index_path} kh√¥ng t·ªìn t·∫°i"
    
    file_size = index_path.stat().st_size
    return True, f"Index c√≥ k√≠ch th∆∞·ªõc {file_size // 1024}KB"

def main():
    console = Console()
    
    # Header
    console.print("üîç VN Legal Assistant - Ki·ªÉm tra h·ªá th·ªëng", style="bold blue")
    console.print("=" * 60)
    console.print()
    
    # Load settings
    settings = Settings()
    
    # T·∫°o b·∫£ng tr·∫°ng th√°i t·ªïng quan
    status_table = Table(
        title="üìä T·ªïng quan h·ªá th·ªëng",
        header_style="bold green",
        box=box.ROUNDED,
        show_header=True,
        expand=True
    )
    
    status_table.add_column("Th√†nh ph·∫ßn", style="cyan", no_wrap=True, width=25)
    status_table.add_column("Tr·∫°ng th√°i", style="white", width=15)
    status_table.add_column("Chi ti·∫øt", style="white", overflow="fold")
    
    # Ki·ªÉm tra internet
    is_online = check_internet_connection()
    status_table.add_row(
        "üåê Internet",
        Text("‚úÖ Online" if is_online else "‚ùå Offline", style="green" if is_online else "red"),
        "K·∫øt n·ªëi internet ho·∫°t ƒë·ªông" if is_online else "Kh√¥ng c√≥ k·∫øt n·ªëi internet"
    )
    
    # Ki·ªÉm tra Ollama
    ollama_ok, ollama_detail = check_ollama_connection()
    status_table.add_row(
        "ü§ñ Ollama",
        Text("‚úÖ OK" if ollama_ok else "‚ùå Error", style="green" if ollama_ok else "red"),
        f"Ollama server: {settings.openai_base_url}" + (f" - {len(ollama_detail.get('models', []))} models" if ollama_ok and ollama_detail else f" - {ollama_detail}" if not ollama_ok else "")
    )
    
    # Ki·ªÉm tra Gemini
    gemini_ok, gemini_detail = check_gemini_config()
    status_table.add_row(
        "üß† Gemini",
        Text("‚úÖ OK" if gemini_ok else "‚ùå Error", style="green" if gemini_ok else "red"),
        f"Model: {os.getenv('GEMINI_MODEL', 'gemini-2.0-flash')} - {gemini_detail}"
    )
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    data_ok, data_detail = check_data_files()
    status_table.add_row(
        "üìö D·ªØ li·ªáu",
        Text("‚úÖ OK" if data_ok else "‚ùå Error", style="green" if data_ok else "red"),
        data_detail
    )
    
    # Ki·ªÉm tra index
    index_ok, index_detail = check_index_files()
    status_table.add_row(
        "üéØ Vector Index",
        Text("‚úÖ OK" if index_ok else "‚ùå Error", style="green" if index_ok else "red"),
        index_detail
    )
    
    console.print(status_table)
    console.print()
    
    # B·∫£ng c·∫•u h√¨nh
    config_table = Table(
        title="‚öôÔ∏è C·∫•u h√¨nh hi·ªán t·∫°i",
        header_style="bold yellow",
        box=box.SIMPLE,
        show_header=True
    )
    
    config_table.add_column("Tham s·ªë", style="cyan", no_wrap=True)
    config_table.add_column("Gi√° tr·ªã", style="white")
    
    config_table.add_row("LLM Model", settings.llm_model)
    config_table.add_row("Embed Model", os.getenv("EMBED_MODEL", "nomic-embed-text"))
    config_table.add_row("Top K", str(settings.top_k))
    config_table.add_row("Max Context", str(settings.max_context_chars))
    config_table.add_row("Max Tokens", str(settings.max_tokens))
    config_table.add_row("Temperature", str(settings.temperature))
    config_table.add_row("Direct Cite First", str(settings.direct_cite_first))
    config_table.add_row("Embeddings Enabled", os.getenv("EMBEDDINGS_ENABLED", "true"))
    
    console.print(config_table)
    console.print()
    
    # Khuy·∫øn ngh·ªã
    recommendations = []
    
    if not is_online and not gemini_ok:
        recommendations.append("üí° Kh√¥ng c√≥ internet - h·ªá th·ªëng s·∫Ω ch·ªâ s·ª≠ d·ª•ng Ollama offline")
    
    if not ollama_ok:
        recommendations.append("‚ö†Ô∏è Ollama kh√¥ng ho·∫°t ƒë·ªông - h√£y kh·ªüi ƒë·ªông Ollama tr∆∞·ªõc")
    
    if not data_ok:
        recommendations.append("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu - h√£y th√™m file .json v√†o th∆∞ m·ª•c data/")
        
    if not index_ok and os.getenv("EMBEDDINGS_ENABLED", "true").lower() == "true":
        recommendations.append("‚ö†Ô∏è Thi·∫øu vector index - ch·∫°y: python src/tools/build_vector_index.py")
    
    if recommendations:
        console.print("üí° Khuy·∫øn ngh·ªã:", style="bold yellow")
        for rec in recommendations:
            console.print(f"  {rec}")
    else:
        console.print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng ho·∫°t ƒë·ªông!", style="bold green")
    
    console.print()
    console.print(f"Th·ªùi gian ki·ªÉm tra: {datetime.datetime.now().strftime('%H:%M:%S - %d/%m/%Y')}")

if __name__ == "__main__":
    main()